// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using project_backend.Data;

#nullable disable

namespace project_backend.Migrations
{
    [DbContext(typeof(CVFitContext))]
    [Migration("20221129194200_updateBlogData")]
    partial class updateBlogData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("project_backend.Entities.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<string>("Avatar")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<int>("Likes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Tommy Hamilton",
                            Avatar = "./assets/images/ava1-modified.png",
                            Content = "Does anyone have suggestions for apps to track my macro intakes.  Why do you recommend?",
                            Likes = 5,
                            Title = "Good apps for tracking macros??"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Gina Smith",
                            Avatar = "./assets/images/ava2-modified.png",
                            Content = "When chest pressing I can only feel tension in my biceps and sholders.  Any tips to engage chest and triceps?",
                            Likes = 2,
                            Title = "Mind Muscle Connection Help"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Mike Glennon",
                            Avatar = "./assets/images/ava3-modified.png",
                            Content = "What type of cardio do people prefer.  Looking to lose weight fast and have a good sweat.",
                            Likes = 12,
                            Title = "Best form of cadio?"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Jim Fisher",
                            Avatar = "./assets/images/ava4-modified.png",
                            Content = "I've been waking up extremely sore recently and think its time to start prioritizing recovery.  Any tips and tricks??",
                            Likes = 9,
                            Title = "Recovery Tips"
                        });
                });

            modelBuilder.Entity("project_backend.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BlogId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reply")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlogId = 1,
                            Reply = "Generic Reply",
                            User = "Alexander"
                        },
                        new
                        {
                            Id = 2,
                            BlogId = 1,
                            Reply = "Generic Reply",
                            User = "Sam"
                        },
                        new
                        {
                            Id = 3,
                            BlogId = 2,
                            Reply = "Generic Reply",
                            User = "Peter"
                        },
                        new
                        {
                            Id = 4,
                            BlogId = 3,
                            Reply = "Generic Reply",
                            User = "Jeremy"
                        });
                });

            modelBuilder.Entity("project_backend.Entities.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Firstname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Lastname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "mGreen234@gmail.com",
                            Firstname = "Mike",
                            Lastname = "Green",
                            Notes = "Some generic message about what they want to get out of a membership"
                        },
                        new
                        {
                            Id = 2,
                            Email = "sCassel893@gmail.com",
                            Firstname = "Shannon",
                            Lastname = "Cassel",
                            Notes = "Some generic message about what they want to get out of a membership"
                        },
                        new
                        {
                            Id = 3,
                            Email = "lRice034@gmail.com",
                            Firstname = "Lexi",
                            Lastname = "Rice",
                            Notes = "Some generic message about what they want to get out of a membership"
                        },
                        new
                        {
                            Id = 4,
                            Email = "tMaderia432@gmail.com",
                            Firstname = "Tyler",
                            Lastname = "Maderia",
                            Notes = "Some generic message about what they want to get out of a membership"
                        });
                });

            modelBuilder.Entity("project_backend.Entities.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Difficulty")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("MuscleGroup")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RepRange")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoURL")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Sit on the bench with your knees bent and grasp the cable attachment. It often has a triangle handle, but it may be a bar. Position yourself with your knees slightly bent, so you have to reach to grab the handle with outstretched arms without curling the lower back over. Brace the abdominals, and you're ready to row",
                            Difficulty = "Intermediate",
                            ImageURL = "assets/images/Row.png",
                            MuscleGroup = "Back",
                            Name = "Seated Cable Rows",
                            RepRange = "8-12",
                            VideoURL = "https://www.youtube.com/embed/sP_4vybjVJs"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Grasp the bar with a overhand wide grip with an overhand. Pull the bar down until it's approximately level with the chin. Exhale on the downward motion. Squeeze the shoulder blades together while maintaining square shoulders.",
                            Difficulty = "Beginner",
                            ImageURL = "assets/images/LatPulldown.webp",
                            MuscleGroup = "Back",
                            Name = "Lat Pulldowns",
                            RepRange = "8-12",
                            VideoURL = "https://www.youtube.com/embed/j9jtjL8FhPI"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Some Descr",
                            Difficulty = "Easy",
                            ImageURL = "x",
                            MuscleGroup = "Chest",
                            Name = "Fly's",
                            RepRange = "10-15",
                            VideoURL = "x"
                        });
                });

            modelBuilder.Entity("project_backend.Entities.Lift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Reps")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Sets")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Weight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutId");

                    b.ToTable("Lift");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bench",
                            Reps = 12,
                            Sets = 4,
                            Weight = 45,
                            WorkoutId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fly's",
                            Reps = 12,
                            Sets = 4,
                            Weight = 145,
                            WorkoutId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pushups",
                            Reps = 20,
                            Sets = 4,
                            Weight = 0,
                            WorkoutId = 3
                        });
                });

            modelBuilder.Entity("project_backend.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Avatar")
                        .HasColumnType("TEXT");

                    b.Property<string>("Firstname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Lastname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.Property<int>("WeightGoal")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Avatar = "x",
                            Firstname = "Linda",
                            Lastname = "Martin",
                            Username = "LMartin567",
                            WeightGoal = 145
                        },
                        new
                        {
                            Id = 2,
                            Avatar = "x",
                            Firstname = "Jack",
                            Lastname = "Smith",
                            Username = "JSmith215",
                            WeightGoal = 175
                        },
                        new
                        {
                            Id = 3,
                            Avatar = "x",
                            Firstname = "Cindy",
                            Lastname = "Long",
                            Username = "CLong498",
                            WeightGoal = 115
                        });
                });

            modelBuilder.Entity("project_backend.Entities.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Workout");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Full Body Day",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Title = "Leg Day",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Title = "Chest",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Title = "Armd",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            Title = "Back & Bi's",
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            Title = "FullBody",
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            Title = "Cardio and Abs",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("project_backend.Entities.Comment", b =>
                {
                    b.HasOne("project_backend.Entities.Blog", "Blog")
                        .WithMany("Comment")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("project_backend.Entities.Lift", b =>
                {
                    b.HasOne("project_backend.Entities.Workout", "Workout")
                        .WithMany("Lift")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("project_backend.Entities.Workout", b =>
                {
                    b.HasOne("project_backend.Entities.User", "User")
                        .WithMany("Workout")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("project_backend.Entities.Blog", b =>
                {
                    b.Navigation("Comment");
                });

            modelBuilder.Entity("project_backend.Entities.User", b =>
                {
                    b.Navigation("Workout");
                });

            modelBuilder.Entity("project_backend.Entities.Workout", b =>
                {
                    b.Navigation("Lift");
                });
#pragma warning restore 612, 618
        }
    }
}
